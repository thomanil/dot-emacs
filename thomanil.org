
This file is loaded from init.el after any .org files in extras/ This
is because we want to be able to use libraries from there in this
file. Elisp code is extracted by init.el and executed from top to
bottom.

* Set up package system

Add some more repositories:

#+begin_src emacs-lisp
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))

(add-to-list 'package-archives
             '("melpa"     . "http://melpa.milkbox.net/packages/"))
#+end_src

* Set up basic modes, commands
** Emacs server mode
   Let's support emacsclient. For that to work, we'll need to start the server.
   Unless, of course, it's already running.

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

** Web-mode
   An actual major mode that works html and templates? Let's get
   that!

#+BEGIN_SRC emacs-lisp

(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html$" . web-mode))

(define-key web-mode-map (kbd "C-n") 'web-mode-tag-match)
(define-key web-mode-map (kbd "C-f") 'web-mode-fold-or-unfold)
(define-key web-mode-map (kbd "C-'") 'web-mode-mark-and-expand)

(set-face-attribute 'web-mode-html-tag-face nil :foreground "DarkViolet")

#+END_SRC
** YASnippet

#+begin_src emacs-lisp
(add-to-list 'load-path
             "~/.emacs.d/elpa/yasnippet-0.6.1")
(require 'yasnippet)
;; (yas/initialize)
(yas/load-directory "~/.emacs.d/snippets")

#+end_src

Make yasnippet play nice with org-mode

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
                    (lambda ()
                      (org-set-local 'yas/trigger-key [tab])
                      (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))

(defun yas/org-very-safe-expand ()
   (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(add-hook 'org-mode-hook
                    (lambda ()
                        (make-variable-buffer-local 'yas/vtrigger-key)
                        (setq yas/trigger-key [tab])
                        (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                        (define-key yas/keymap [tab] 'yas/next-field)))
#+end_src

** Ido
    Ido improves all kind of minibuffer activities:
    - find-file
    - switch-buffer

    with case-insensitivity and all kinds of wonderful things. Let's
    load it up:

#+begin_src emacs-lisp
(load-library "ido")
(ido-mode t)

;; Fix for the warnings

(defvar ido-cur-item nil)
(defvar ido-default-item nil)
(defvar ido-cur-list nil)
(defvar predicate nil)
(defvar inherit-input-method nil)


(setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess
        ido-max-prospects 10)
#+end_src


    Enhance ido with the flx-ido package to improve fuzzy matching/sorting
#+begin_src emacs-lisp
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
#+end_src


#+begin_src emacs-lisp
;; Display ido results vertically, rather than horizontally
(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))

(defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
  (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
  (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
    (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
    (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
  (add-hook 'ido-setup-hook 'ido-define-keys)

#+end_src


    Also load ido-ubiquitous-mode to make sure we use Ido nearly everywhere

#+begin_src emacs-lisp
(require 'ido-ubiquitous)
(ido-ubiquitous-mode 1)
#+end_src


Jump to tag support

#+begin_src emacs-lisp
(require 'etags)
(defun ido-find-tag ()
  "Find a tag using ido"
  (interactive)
  (tags-completion-table)
  (let (tag-names)
    (mapc (lambda (x)
	    (unless (integerp x)
	      (push (prin1-to-string x t) tag-names)))
	  tags-completion-table)
    (find-tag (ido-completing-read "Tag: " tag-names))))

(defun ido-find-file-in-tag-files ()
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " (tags-table-files) nil t)))))

(global-set-key [remap find-tag] 'ido-find-tag)
(global-set-key (kbd "C-.") 'ido-find-file-in-tag-files)
#+end_src

Jump to a symbol (function, class etc.) with completion.
No textmate required

#+begin_src emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))
#+end_src

** YAML mode
#+begin_src emacs-lisp
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src
** Markdown mode
#+begin_src emacs-lisp
(require 'markdown-mode)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
#+end_src

** Use the simplest default mode in RE-builder
#+begin_src emacs-lisp
(require 're-builder)
(setq reb-re-syntax 'string)
#+end_src
** Magnar's awesome Magit setup

#+begin_src emacs-lisp
(require 'magit)
(add-to-list 'load-path "~/.emacs.d/extras")
#+end_src

   Magnar (or Christian?) shared some customizations for Magit
   that make it even better:

#+begin_src emacs-lisp
(require 'setup-magit)
#+end_src

   I use C-x m for starting magit

#+begin_src emacs-lisp
(global-set-key (kbd "C-x m") 'magit-status)
#+end_src

** String-edit

   #+begin_src emacs-lisp
   (require 'string-edit)
   #+end_src

** Modify rgrep

Great tweaks by Magnar

#+begin_src emacs-lisp
(defun rgrep-fullscreen (regexp &optional files dir confirm)
  "Open grep in full screen, saving windows."
  (interactive
   (progn
     (grep-compute-defaults)
     (cond
      ((and grep-find-command (equal current-prefix-arg '(16)))
       (list (read-from-minibuffer "Run: " grep-find-command
                                   nil nil 'grep-find-history)))
      ((not grep-find-template)
       (error "grep.el: No `grep-find-template' available"))
      (t (let* ((regexp (grep-read-regexp))
                (files (grep-read-files regexp))
                (dir (read-directory-name "Base directory: "
                                          nil default-directory t))
                (confirm (equal current-prefix-arg '(4))))
           (list regexp files dir confirm))))))
  (window-configuration-to-register ?$)
  (rgrep regexp files dir confirm)
  (switch-to-buffer "*grep*")
  (delete-other-windows)
  (beginning-of-buffer))

(defun rgrep-quit-window ()
  (interactive)
  (kill-buffer)
  (jump-to-register ?$))

(defun rgrep-goto-file-and-close-rgrep ()
  (interactive)
  (compile-goto-error)
  (kill-buffer "*grep*")
  (delete-other-windows)
  (message "Type C-x r j $ to return to pre-rgrep windows."))

(eval-after-load "grep"
  '(progn
     ;; Don't recurse into some directories
     (add-to-list 'grep-find-ignored-directories "target")
     (add-to-list 'grep-find-ignored-directories "node_modules")
     (add-to-list 'grep-find-ignored-directories "vendor")
     (add-to-list 'grep-find-ignored-directories "log")

     ;; Add custom keybindings
     (define-key grep-mode-map "q" 'rgrep-quit-window)
     (define-key grep-mode-map (kbd "C-<return>") 'rgrep-goto-file-and-close-rgrep)))
#+end_src

** Add wgrep for easy search-replace in grep buffer
   (require 'wgrep)
** Projectile
#+begin_src emacs-lisp
  (projectile-global-mode)
#+end_src
** Company mode

   Magical Text completion!

   http://company-mode.github.io/

   Also turn off "downcase by default" behavior for plaintext/dabbrev
   http://emacs.stackexchange.com/questions/10837/how-to-make-company-mode-be-case-sensitive-on-plain-text

   #+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-dabbrev-downcase nil)
   #+end_src

* Adjust basic look, feel & behavior of Emacs
** Use the pleasant, low-contrast Solarized color theme
   Emacs 24 has built-in theming support.

   I'm using the solarized-dark theme right now. It's really easy on
   my eyes and pretty as well. This theme is installed using Emacs'
   package manager, so solarized would be in elpa/solarized-theme-0.5.0.
   To install a theme, use package-install.

#+begin_src emacs-lisp
(load-theme 'solarized-dark t)
#+end_src

** I like autopaired quotes, parens etc, so turn on electric-pair-mode
#+begin_src emacs-lisp
(electric-pair-mode t)
#+end_src
** Get rid of that big ugly toolbar
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src
** Don't need the menu bar all the time
#+begin_src emacs-lisp
(menu-bar-mode 0)
#+end_src
** Who needs the scrollbars?
#+begin_src emacs-lisp
(scroll-bar-mode 0)
#+end_src
** Make sure we prefer UTF-8 coding
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src
** Show me the column number please
#+begin_src emacs-lisp
   (column-number-mode 1)
#+end_src
** Don't make me say yes or no, y/n will do
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Make sure buffers update when files change
   By default, Emacs will not update the contents of open buffers when
   a file changes on disk. This is inconvenient when switching
   branches in Git - as you'd risk editing stale buffers.

   This problem can be solved:

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src

** Blinking cursor is nice, I want that
#+begin_src emacs-lisp
(blink-cursor-mode t)
#+end_src

** Highlight the current line
#+begin_src emacs-lisp
(global-hl-line-mode 1)
#+end_src

** Scrolling is not very smooth by default in Emacs, let's fix it
#+begin_src emacs-lisp
(setq scroll-conservatively 10000
      scroll-step 1)
#+end_src

** Stop creating backup~ and #auto-save# files
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src
** Auto refresh dired, but be quiet about it
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

** Don't show messages that I don't read
#+begin_src emacs-lisp
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
#+end_src
** Lines should be 80 characters wide, not 72
#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src
** Don't break lines for me, please
#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src
** Fontify org-mode code blocks
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src
** I always want an indent after I hit a new line
#+begin_src emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** On OSX, tweak fonts and meta keybinding
#+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (set-face-attribute 'default nil :font "Monaco-16")
  (set-face-attribute 'default nil :height 140)
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper))
#+end_src

** I usually don't want postambles in exported html from org mode

#+begin_src emacs-lisp
(setq org-export-html-postamble nil)
#+end_src

** Get ansi color in terminals
#+begin_src emacs-lisp
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src
* Keybindings
** Misc custom keybindings
I try to just use custom keybindings as far as possible, so I won't be
completely lost when I have to sit down in a non-/differently
configured Emacs session. Some personal convenience keybindings,
however:

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'hippie-expand)
;;(global-set-key (kbd "M-o") 'find-file-in-project) ;; Now using projectile instead of ffip
(global-set-key (kbd "M-o") 'projectile-find-file)
(global-set-key (kbd "M-r") 'rgrep)
(global-set-key (kbd "M-f") 'find-dired)
(global-set-key (kbd "C-f") 'ido-goto-symbol)
(global-set-key [f5] 'apply-macro-to-region-lines)
(global-set-key (kbd "M-?") 'tags-search)
(global-set-key (kbd "C-v") 'eval-buffer)
(global-set-key (kbd "C-x p") 'persp-switch)
(global-set-key (kbd "§") 'just-one-space)

#+end_src

If global keybinding clash with bindings in some specific mode, then
define them in a separate my-keys-minor-mode which is active
everywhere, overriding other modes.

#+begin_src emacs-lisp
(defvar my-keys-minor-mode-map (make-keymap) "my-keys-minor-mode keymap.")

;; (define-key my-keys-minor-mode-map (kbd "C-'") 'er/expand-region)
;;; --> Define other "truly global" keybindings here...

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  t " my-keys" 'my-keys-minor-mode-map)

(my-keys-minor-mode 1)

(defun my-minibuffer-setup-hook ()
  (my-keys-minor-mode 0))
(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)
#+end_src
** Use shift+arrow keys to move between Emacs windows
#+begin_src emacs-lisp
(windmove-default-keybindings)
#+end_src

** Make Meta-x available without having a meta key
Add alternate way to execute commands. Handy when working from a
terminal etc where meta keys are mapped/handled in unpredictable ways.

#+begin_src emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+end_src

** Use C-+ and C-- to adjust font size
#+begin_src emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+end_src
* Day-to-day orgfiles
** Have my often-used orgfiles handy
I use orgfiles for my projects, cheatsheets, and assorted other things
I need to remember/keep track of.

#+begin_src emacs-lisp
(defun my-orgfiles ()
  (interactive)
  (dired "~/Dropbox/orgfiles/"))

(global-set-key (kbd "C-x g") 'my-orgfiles)
#+end_src


** Make it super smooth to write one-off orgfiles

I like to write up mail, documentation, customer support etc in
orgfiles. So smooth out away initial steps of setting up new buffers,
file etc for a new orgfile:

#+begin_src emacs-lisp
(defun new-orgletter ()
  (interactive)
  (let ((name (concat "~/Dropbox/orgfiles/2_tmp/" (read-string "New org file: " "tmp.org"))))
    (find-file "~/Dropbox/orgfiles/2_tmp/_template.org")
    (write-file name)))

(global-set-key (kbd "C-o") 'new-orgletter)
#+end_src
** A quick command to browse previous one-off orgfiles

#+begin_src emacs-lisp
(defun browse-orgletters ()
  (interactive)
  (dired "~/Dropbox/orgfiles/2_tmp/"))

(global-set-key (kbd "C-p") 'browse-orgletters)
#+end_src

* Misc supporting workflow stuff
** A quick way to jump to my .emacs.d setup

Make updating my emacs config super low threshold.

#+begin_src emacs-lisp
(defun edit-emacs-config ()
 (interactive)
 (find-file "~/.emacs.d/thomanil.org"))
#+end_src

** A quick way to reload my .emacs.d setup

#+begin_src emacs-lisp
(defun reload-emacs-config ()
  (interactive)
  (save-window-excursion
    (find-file "~/.emacs.d/init.el")
    (eval-buffer)))
#+end_src

** Lorem ipsum filler at my fingertips
#+begin_src emacs-lisp
(defun lorem ()
  "Insert a lorem ipsum."
  (interactive)
  (insert "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n"
          "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n"
          "ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n"
          "aliquip ex ea commodo consequat. Duis aute irure dolor in\n"
          "reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n"
          "pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n"
          "culpa qui officia deserunt mollit anim id est laborum."))
#+end_src
** Always kill trailing whitespace on file saves
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** Convenience function for ERT testing

#+begin_src emacs-lisp
(defun ert-test-current-buffer ()
  (interactive)
  (ert-delete-all-tests)
  (eval-buffer)
  (ert t nil))

(global-set-key (kbd "C-x t") 'ert-test-current-buffer)
#+end_src

** Convenience function to explicitly edit files as sudo

#+begin_src emacs-lisp
(defun sudo-edit (&optional arg)
  (interactive "p")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

** Edit my /etc/hosts file as sudo
   #+begin_src emacs-lisp

(defun sudo-find-file (file-name)
  "Like find file, but opens the file as root."
  (interactive "FSudo Find File: ")
  (let ((tramp-file-name (concat "/sudo::" (expand-file-name file-name))))
    (find-file tramp-file-name)))

(defun edit-hostsfile ()
  (interactive)
  (sudo-find-file "/etc/hosts"))
   #+end_src
** Move lines and regions up and down with M-down|up

Move current active line or marked region up and down using M-up, M-down.
Cargoculted from EmacsWiki at http://www.emacswiki.org/emacs/MoveText

#+begin_src emacs-lisp
  (defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (let ((column (current-column)))
      (beginning-of-line)
      (when (or (> arg 0) (not (bobp)))
        (forward-line)
        (when (or (< arg 0) (not (eobp)))
          (transpose-lines arg))
        (forward-line -1))
      (move-to-column column t)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))

(provide 'move-text)


(global-set-key [M-up] 'move-text-up)
(global-set-key [M-down] 'move-text-down)
#+end_src
** Cleanup everything in buffer with one cmd
#+begin_src emacs-lisp
   (defun clean-up-buffer ()
       "Perform housekeeping on the current buffer"
       (interactive)
       (save-excursion
         (whitespace-cleanup)
         (mark-whole-buffer)
         (indent-region (point) (mark))))

(global-set-key (kbd "<backtab>") 'clean-up-buffer)
#+end_src
** I sometimes want to rename both the file and buffer I'm working on
#+begin_src emacs-lisp
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+end_src
** Make sure magit finds git on os x
   #+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (setenv "PATH" (concat "/usr/local/git/bin:/usr/local/bin:" (getenv "PATH")))
  (push "/usr/local/git/bin" exec-path))
   #+end_src
** Make sure cider finds lein on os x
   #+begin_src emacs-lisp
(when (equal system-type 'darwin)
  (setenv "PATH" (concat "/Users/thomanil/Dropbox/scripts:" (getenv "PATH")))
  (push "/Users/thomanil/Dropbox/scripts" exec-path))
   #+end_src
** Unfill function

   #+begin_src emacs-lisp
    ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
    (defun unfill-paragraph (&optional region)
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive (progn (barf-if-buffer-read-only) '(t)))
      (let ((fill-column (point-max))
            ;; This would override `fill-column' if it's an integer.
            (emacs-lisp-docstring-fill-column t))
        (fill-paragraph nil region)))

    ;; Handy key definition
    (define-key global-map "\M-U" 'unfill-paragraph)
    #+end_src
